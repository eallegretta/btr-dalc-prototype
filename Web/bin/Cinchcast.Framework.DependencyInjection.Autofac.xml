<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cinchcast.Framework.DependencyInjection.Autofac</name>
    </assembly>
    <members>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.AutofacServiceLocator">
            <summary>
            Autofac service locator implementation
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.AutofacServiceLocator.#ctor(Autofac.IComponentContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DependencyInjection.Autofac.AutofacServiceLocator"/> class.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.ArgumentNullException">Throws if the container is null</exception>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.AutofacServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of resolving
            the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>
            The requested service instance.
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.AutofacServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            When implemented by inheriting classes, this method will do the actual work of
            resolving all the requested service instances.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>
            Sequence of service instance objects.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.ICanIntercept">
            <summary>
            Defines the contract to use within an interceptor to determine if it can intercept the specified type
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.ICanIntercept.CanIntercept(System.Type)">
            <summary>
            Determines whether this instance can intercept the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>
              <c>true</c> if this instance can intercept the specified target type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute">
            <summary>
            Performs interception applying the specified service
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute.#ctor(Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute"/> class.
            </summary>
            <param name="interceptorService">The interceptor service.</param>
            <exception cref="T:System.ArgumentNullException">If the interceptorService is null</exception>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute"/> class.
            </summary>
            <param name="interceptorServiceName">Name of the interceptor service.</param>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute"/> class.
            </summary>
            <param name="interceptorServiceType">Type of the interceptor service.</param>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute.InterceptorService">
            <summary>
            Gets the interceptor service.
            </summary>
            <value>
            The interceptor service.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute.InterceptorServiceName">
            <summary>
            Gets the name of the interceptor service.
            </summary>
            <value>
            The name of the interceptor service.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.InterceptAttribute.InterceptorServiceType">
            <summary>
            Gets the type of the interceptor service.
            </summary>
            <value>
            The type of the interceptor service.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions">
            <summary>
            Registration extensions for interception
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.RegisterInterceptors(Autofac.ContainerBuilder)">
            <summary>
            Registers the interceptors.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.EnableClassInterceptors``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1})">
            <summary>
            Enable class interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or added with InterceptedBy().
            Only virtual methods can be intercepted this way.
            </summary>
            <typeparam name="TLimit">The type of the limit</typeparam>
            <typeparam name="TRegistrationStyle">The type of the registration style</typeparam>
            <param name="registration">The registration</param>
            <returns>
            The same registration builder with the action applied
            </returns>
            <exception cref="T:System.ArgumentNullException">If registration is null</exception>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.EnableClassInterceptors``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Enable class interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or added with InterceptedBy().
            Only virtual methods can be intercepted this way.
            </summary>
            <typeparam name="TLimit">The type of the limit</typeparam>
            <typeparam name="TConcreteReflectionActivatorData">The type of the concrete reflection activator data.</typeparam>
            <typeparam name="TRegistrationStyle">The type of the registration style</typeparam>
            <param name="registration">The registration</param>
            <returns>
            The same registration builder with the action applied
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.EnableInterfaceInterceptors``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
            <summary>
            Enable interface interception on the target type. Interceptors will be determined
            via Intercept attributes on the class or interface, or added with InterceptedBy() calls.
            </summary>
            <typeparam name="TLimit">The type of the limit.</typeparam>
            <typeparam name="TActivatorData">The type of the activator data.</typeparam>
            <typeparam name="TSingleRegistrationStyle">The type of the single registration style.</typeparam>
            <param name="registration">The registration.</param>
            <returns>
            The same registration builder with the action applied
            </returns>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.InterceptedBy``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Service[])">
            <summary>
            Determines that the registration is intercepted by the specified services.
            </summary>
            <typeparam name="TLimit">The type of the limit.</typeparam>
            <typeparam name="TActivatorData">The type of the activator data.</typeparam>
            <typeparam name="TStyle">The type of the style.</typeparam>
            <param name="builder">The builder.</param>
            <param name="interceptorServices">The interceptor services.</param>
            <returns>A container registation</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the builder is null or the interceptorServices are null</exception>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.InterceptedBy``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String[])">
            <summary>
            Determines that the registration is intercepted by the specified services.
            </summary>
            <typeparam name="TLimit">The type of the limit.</typeparam>
            <typeparam name="TActivatorData">The type of the activator data.</typeparam>
            <typeparam name="TStyle">The type of the style.</typeparam>
            <param name="builder">The builder.</param>
            <param name="interceptorServiceNames">The interceptor service names.</param>
            <returns>A container registation</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the interceptorServices are null</exception>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Interceptors.RegistrationExtensions.InterceptedBy``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
            <summary>
            Determines that the registration is intercepted by the specified services.
            </summary>
            <typeparam name="TLimit">The type of the limit.</typeparam>
            <typeparam name="TActivatorData">The type of the activator data.</typeparam>
            <typeparam name="TStyle">The type of the style.</typeparam>
            <param name="builder">The builder.</param>
            <param name="interceptorServiceTypes">The interceptor service types.</param>
            <returns>A container registation</returns>
            <exception cref="T:System.ArgumentNullException">Throws if the interceptorServiceTypes are null</exception>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Ioc">
            <summary>
            Ioc class holds the container and provides initialization method
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.Initialize(System.Reflection.Assembly[])">
            <summary>
            Initializes the container.
            </summary>
            <param name="assemblyModules">An array of assemblies that contains registration modules.</param>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.SetAssembliesResolver(System.Func{System.Collections.Generic.IEnumerable{System.Reflection.Assembly}})">
            <summary>
            Sets the assemblies resolver.
            </summary>
            <param name="resolver">The resolver function.</param>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.GetAssemblies">
            <summary>
            Return the resolved assemblies set by the assemblies resolver
            </summary>
            <returns>An array of resolved assemblies</returns>
        </member>
        <member name="E:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostBuild">
            <summary>
            Raises after the container has been created
            </summary>
        </member>
        <member name="E:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistration">
            <summary>
            Raises after a registration has been peformed
            </summary>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.Container">
            <summary>
            Gets the container.
            </summary>
            <value>
            The container.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostBuildEventArgs">
            <summary>
            PostBuild event arguments
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostBuildEventArgs.#ctor(Autofac.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostBuildEventArgs"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostBuildEventArgs.Container">
            <summary>
            Gets the container
            </summary>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistrationEventArgs">
            <summary>
            PostRegistration event arguments
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistrationEventArgs.#ctor(Autofac.IContainer,System.Type,Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle})">
            <summary>
            Initializes a new instance of the <see cref="T:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistrationEventArgs"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="type">The type.</param>
            <param name="registrationBuilder">The registration builder.</param>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistrationEventArgs.Container">
            <summary>
            Gets the container
            </summary>
            <value>
            The container.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistrationEventArgs.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.Ioc.PostRegistrationEventArgs.RegistrationBuilder">
            <summary>
            Gets the registration
            </summary>
            <value>
            The registration builder.
            </value>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Modules.MvcModule">
            <summary>
            Performs registration of MVC 4 components 
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Modules.MvcModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <param name="builder">The builder through which components can be
            registered.</param>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.Modules.ServicesModule">
            <summary>
            Performs the registration of the services and contracts. The autoregistration looks for all the types that has an interface
            names ITypeName.
            <example>
            public class MyService: IMyService
            </example>
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.Modules.ServicesModule.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <param name="builder">The builder through which components can be
            registered.</param>
            <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
        </member>
        <member name="T:Cinchcast.Framework.DependencyInjection.Autofac.RegistrationSources.MvcViewRegistrationSource">
            <summary>
            Performs ViewPage, WebViewPage, ViewMasterPage and ViewUserControl registrations
            </summary>
        </member>
        <member name="M:Cinchcast.Framework.DependencyInjection.Autofac.RegistrationSources.MvcViewRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
            <summary>
            Registrations for.
            </summary>
            <param name="service">The service.</param>
            <param name="registrationAccessor">The registration accessor.</param>
            <returns>An enumerable of IComponentRegistration</returns>
        </member>
        <member name="P:Cinchcast.Framework.DependencyInjection.Autofac.RegistrationSources.MvcViewRegistrationSource.IsAdapterForIndividualComponents">
            <summary>
            Gets a value indicating whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
        </member>
    </members>
</doc>
